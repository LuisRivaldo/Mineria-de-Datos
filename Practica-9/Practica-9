import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import matplotlib.pyplot as plt
import os

# Cargar los datos
df = pd.read_csv("new-df.csv")

# Crear carpetas
output_dir = "Forecasting-Graphs"
os.makedirs(output_dir, exist_ok=True)
output_folder = "forecasting-CSV"
os.makedirs(output_folder, exist_ok=True)

# Preprocesamiento de datos
# Convertir 'release_date' a tipo datetime
df['release_date'] = pd.to_datetime(df['release_date'], errors='coerce')

# Crear una columna para el año de la fecha de lanzamiento
df['release_year'] = df['release_date'].dt.year

# Filtrar datos válidos
df = df.dropna(subset=['release_year', 'popularity'])  # Eliminar filas sin año o popularidad

# Agrupar por año y calcular la popularidad promedio
time_series = df.groupby('release_year')['popularity'].mean().reset_index()

# Separar los datos en entrenamiento y prueba
X = time_series[['release_year']].values  # Variable independiente (años)
y = time_series['popularity'].values  # Variable dependiente (popularidad promedio)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de regresión lineal
model = LinearRegression()
model.fit(X_train, y_train)

# Predicciones
y_pred = model.predict(X_test)

# Calcular métricas
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Error Cuadrático Medio (MSE): {mse}")
print(f"Puntuación R2: {r2}")

# Visualizar los resultados
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Datos Reales')
plt.plot(X_test, y_pred, color='red', label='Predicción')
plt.title("Predicción de Popularidad Promedio por Año (Regresión Lineal)")
plt.xlabel("Año de Lanzamiento")
plt.ylabel("Popularidad Promedio")
plt.legend()
output_path = os.path.join(output_dir, "Forecasting-resultados.png")
plt.savefig(output_path)
plt.show()

# Predecir nuevos datos
future_years = np.array([[2025], [2026], [2027], [2028], [2029]])
future_predictions = model.predict(future_years)

# Crear un DataFrame para las predicciones futuras
forecast_df = pd.DataFrame({
    'release_year': future_years.flatten(),
    'predicted_popularity': future_predictions
})

# Guardar las predicciones en un archivo CSV
output_path = os.path.join(output_folder, "Forecasting-predicciones.csv")
forecast_df.to_csv(output_path, index=False)